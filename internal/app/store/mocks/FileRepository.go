// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	context "context"
	model "hack/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *FileRepository) Create(_a0 context.Context, _a1 model.File) (model.File, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.File
	if rf, ok := ret.Get(0).(func(context.Context, model.File) model.File); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.File) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *FileRepository) GetByID(_a0 context.Context, _a1 int) (model.File, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.File
	if rf, ok := ret.Get(0).(func(context.Context, int) model.File); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: _a0
func (_m *FileRepository) GetLast(_a0 context.Context) (model.File, error) {
	ret := _m.Called(_a0)

	var r0 model.File
	if rf, ok := ret.Get(0).(func(context.Context) model.File); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: _a0
func (_m *FileRepository) GetList(_a0 context.Context) ([]model.File, error) {
	ret := _m.Called(_a0)

	var r0 []model.File
	if rf, ok := ret.Get(0).(func(context.Context) []model.File); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *FileRepository) Update(_a0 context.Context, _a1 model.File) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.File) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
